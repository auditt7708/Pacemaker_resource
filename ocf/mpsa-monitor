#!/bin/sh
##  The contents of this file are subject to the Mozilla Public License
##  Version 1.1 (the "License"); you may not use this file except in
##  compliance with the License. You may obtain a copy of the License
##  at http://www.mozilla.org/MPL/
##
##  Software distributed under the License is distributed on an "AS IS"
##  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
##  the License for the specific language governing rights and
##  limitations under the License.
##
##  The Initial Developer of the Original Code is GoPivotal, Inc.
##  Copyright (c) 2007-2013 GoPivotal, Inc.  All rights reserved.
##

##
##   OCF Resource Agent compliant mpsa-monitor resource script.
##

## OCF instance parameters
##   OCF_RESKEY_servicempsa
##   OCF_RESKEY_log_base

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/resource.d/heartbeat}
. ${OCF_FUNCTIONS_DIR}/.ocf-shellfuncs

#######################################################################

OCF_RESKEY_servicempsa_default="service mpsa"
OCF_RESKEY_log_base_default="/home/mpsa_mts/mpsa/log"
: ${OCF_RESKEY_servicempsa=${OCF_RESKEY_servicempsa_default}}
: ${OCF_RESKEY_log_base=${OCF_RESKEY_log_base_default}}
meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="mpsa-monitor">
<version>1.0</version>

<longdesc lang="en">
Resource agent for MPSA monitoring
</longdesc>

<shortdesc lang="en">Resource agent for MPSA monitoring</shortdesc>

<parameters>
<parameter name="servicempsa" unique="0" required="0">
<longdesc lang="en">
The path to the mpsa service
</longdesc>
<shortdesc lang="en">Path to mpsa service</shortdesc>
<content type="string" default="${OCF_RESKEY_servicempsa_default}" />
</parameter>

<parameter name="log_base" unique="0" required="0">
<longdesc lang="en">
Location of the directory under which logs will be created
</longdesc>
<shortdesc lang="en">Log base path</shortdesc>
<content type="string" default="${OCF_RESKEY_log_base_default}" />
</parameter>

</parameters>

<actions>
<action name="start"        timeout="20" />
<action name="stop"         timeout="20" />
<action name="status"       timeout="3" interval="5" />
<action name="monitor"      timeout="3" interval="5" />
<action name="validate-all" timeout="10" />
<action name="meta-data"    timeout="5" />
</actions>
</resource-agent>
END
}

mpsa_usage() {
    cat <<END
usage: $0 {start|stop|status|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

MPSA_SERVICEMPSA=$OCF_RESKEY_servicempsa
MPSA_LOG_BASE=$OCF_RESKEY_log_base

export_vars() {
    [ ! -z $MPSA_LOG_BASE ]            && export MPSA_LOG_BASE
}

mpsa_validate_partial() {
    if [ ! -z $MPSA_LOG_BASE ] && [ ! -d $MPSA_LOG_BASE ]; then
        ocf_log err "mpsa_monitor log_base $MPSA_LOG_BASE does not exist or is not a directory";
        exit $OCF_ERR_INSTALLED;
    fi                    

    return $OCF_SUCCESS
}

mpsa_status() {
    local rc
    rc=`$MPSA_SERVICEMPSA status`

    if [ `echo $rc | grep -c "(mpsa) is running"` == 1 ]; then
        ocf_log debug "MPSA service is running normally"
        return $OCF_SUCCESS
    fi        

    if [ `echo $rc | grep -c "(mpsa) is not running"` == 1 ]; then
        ocf_log debug "MPSA service is not running"
        return $OCF_NOT_RUNNING
    else
	ocf_log err "Unexpected return from MPSA service:: $action: $rc"
        exit $OCF_ERR_GENERIC
    fi
}

mpsa_start() {
#: << COMMENTBLOCK
   local rc

    if mpsa_status; then
        ocf_log info "Resource already running."
        return $OCF_SUCCESS
    fi

    export_vars
    
    rc=`$MPSA_SERVICEMPSA start`
    sleep 15
        
    if [ `echo $rc | grep -c "running: PID"` == 1  ]; then
        ocf_log info "!!! MPSA service started!"
        sleep 15
        return $OCF_SUCCESS
    fi
    
    ocf_log info "!!! MPSA service start failed: $rc"
    exit $OCF_ERR_GENERIC    
#COMMENTBLOCK
    
    #`crm resource cleanup $OCF_RESOURCE_INSTANCE`
    #ocf_run "crm resource cleanup $OCF_RESOURCE_INSTANCE" 
    # mpsa_monitor
    # return $?           
    
    #return $OCF_SUCCESS
}

mpsa_stop() {
    #return $OCF_SUCCESS
    
    #mpsa_monitor    
    rc=`$MPSA_SERVICEMPSA stop`
    #sleep 5
            
    if [ `echo $rc |  grep -c Stopped` == 1  ]; then
        return $OCF_SUCCESS
    fi
                            
    ocf_log info "MPSA service stop failed: $rc"
    #exit $OCF_ERR_GENERIC
                                    
    return $?
}


mpsa_monitor() {
    
# mpsa_status
# return $?

    mpsa_state=`curl -s -i http://127.0.0.1:8080/mpsa/api/payments | grep -c monitoring_paymanet`
    #echo $mpsa_state

    if [ "${mpsa_state}" == 1 ]; then
	#ocf_log info "mpsa_monitor --- 1"
	return $OCF_SUCCESS
    else
	ocf_log info "mpsa_monitor -1: --- Error in monitoring: http://127.0.0.1:8080/mpsa/api/payments"
	#mpsa_stop
	#exit $OCF_ERR_GENERIC
	return $OCF_NOT_RUNNING
    fi          
}

case $__OCF_ACTION in
    meta-data)
        meta_data
        exit $OCF_SUCCESS
        ;;
    usage|help)
        mpsa_usage
        exit $OCF_SUCCESS
        ;;
esac

mpsa_validate_partial

case $__OCF_ACTION in
    start)
        mpsa_start
        ;;
    stop)
        mpsa_stop
        ;;
    status|monitor)
        mpsa_monitor
        ;;
    validate-all)
        exit $OCF_SUCCESS
        ;;
    *)
        mpsa_usage
        exit $OCF_ERR_UNIMPLEMENTED
        ;;
esac

exit $?
